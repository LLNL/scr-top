PROJECT(SCR_TOP)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

# force debug flags to be "-g -O0" instead of "-g"
SET(CMAKE_C_FLAGS_DEBUG   "-g -O0")
SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0")

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/install CACHE PATH "" FORCE)
  MESSAGE(WARNING "Install path is not set! Defaulting to ${CMAKE_INSTALL_PREFIX}")
ENDIF()

OPTION(BUILD_SHARED_LIBS "Whether to build shared libraries" ON)

###################
# SCR CMake options
###################

SET(SCR_RESOURCE_MANAGER "SLURM" CACHE STRING "Resource Manager for CLI (SLURM APRUN PMIX LSF NONE)")
SET_PROPERTY(CACHE SCR_RESOURCE_MANAGER PROPERTY STRINGS SLURM APRUN PMIX LSF NONE)
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_RESOURCE_MANAGER=${SCR_RESOURCE_MANAGER}")

SET(SCR_ASYNC_API "NONE" CACHE STRING "Vendor-specific asynchronous file transfer (INTEL_CPPR NONE)")
SET_PROPERTY(CACHE SCR_ASYNC_API PROPERTY STRINGS NONE INTEL_CPPR)
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_ASYNC_API=${SCR_ASYNC_API}")

OPTION(ENABLE_FORTRAN "Turn Fortran Support ON/OFF" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_FORTRAN=${ENABLE_FORTRAN}")

OPTION(ENABLE_YOGRT "Enable use of yogrt" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_YOGRT=${ENABLE_YOGRT}")
OPTION(ENABLE_MYSQL "Enable use of mysql" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_MYSQL=${ENABLE_MYSQL}")
OPTION(ENABLE_PDSH "Enable use of pdsh" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_PDSH=${ENABLE_PDSH}")

OPTION(ENABLE_TESTS "Build tests" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_TESTS=${ENABLE_TESTS}")
OPTION(ENABLE_EXAMPLES "Build examples" ON)
LIST(APPEND SCR_CMAKE_OPTS "-DENABLE_EXAMPLES=${ENABLE_EXAMPLES}")

SET(SCR_CACHE_BASE "/dev/shm" CACHE PATH "Default base path for SCR cache directory")
SET(SCR_CNTL_BASE "/dev/shm" CACHE PATH "Default base path for SCR control directory")
SET(SCR_CONFIG_FILE "/etc/scr/scr.conf" CACHE FILEPATH "Default full path and filename for SCR config file")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_CACHE_BASE=${SCR_CACHE_BASE}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_CNTL_BASE=${SCR_CNTL_BASE}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_CONFIG_FILE=${SCR_CONFIG_FILE}")

SET(SCR_LOG_ENABLE "0" CACHE STRING "Whether to enable logging of any type (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_ENABLE PROPERTY STRINGS 0 1)
SET(SCR_LOG_TXT_ENABLE "1" CACHE STRING "Whether to enable text file logging (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_TXT_ENABLE PROPERTY STRINGS 0 1)
SET(SCR_LOG_SYSLOG_ENABLE "1" CACHE STRING "Whether to enable syslog logging (1) or not (0)")
SET_PROPERTY(CACHE SCR_LOG_SYSLOG_ENABLE PROPERTY STRINGS 0 1)
SET(SCR_LOG_SYSLOG_PREFIX "SCR" CACHE STRING "String to use as prefix on all syslog messages")
SET(SCR_LOG_SYSLOG_FACILITY "LOG_LOCAL7" CACHE STRING "Facility to use on syslog messages (see man openlog)")
SET(SCR_LOG_SYSLOG_LEVEL "LOG_INFO" CACHE STRING "Level to use on all syslog messages (see man openlog)")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_ENABLE=${SCR_LOG_ENABLE}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_TXT_ENABLE=${SCR_LOG_TXT_ENABLE}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_SYSLOG_ENABLE=${SCR_LOG_SYSLOG_ENABLE}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_SYSLOG_PREFIX=${SCR_LOG_SYSLOG_PREFIX}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_SYSLOG_FACILITY=${SCR_LOG_SYSLOG_FACILITY}")
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LOG_SYSLOG_LEVEL=${SCR_LOG_SYSLOG_LEVEL}")

SET(SCR_FILE_LOCK "FLOCK" CACHE STRING "Specify type of file locking to use (FLOCK FCNTL NONE)")
SET_PROPERTY(CACHE SCR_FILE_LOCK PROPERTY STRINGS FLOCK FCNTL NONE)
LIST(APPEND SCR_CMAKE_OPTS "-DSCR_FILE_LOCK=${SCR_FILE_LOCK}")

if (BUILD_SHARED_LIBS)
   OPTION(SCR_LINK_STATIC "Default to static linking? (Needed for Cray)" OFF)
else()
   OPTION(SCR_LINK_STATIC "Default to static linking? (Needed for Cray)" ON)
endif()

LIST(APPEND SCR_CMAKE_OPTS "-DSCR_LINK_STATIC=${SCR_LINK_STATIC}")

###################

INCLUDE(ExternalProject)

EXTERNALPROJECT_ADD(kvtree
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/kvtree
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DKVTREE_LINK_STATIC=${SCR_LINK_STATIC})
SET(WITH_KVTREE_PREFIX ${CMAKE_INSTALL_PATH} CACHE PATH "")

EXTERNALPROJECT_ADD(rankstr
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/rankstr
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DRANKSTR_LINK_STATIC=${SCR_LINK_STATIC})
SET(WITH_RANKSTR_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(spath
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/spath
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DSPATH_LINK_STATIC=${SCR_LINK_STATIC})
SET(WITH_SPATH_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(axl
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/axl
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DAXL_LINK_STATIC=${SCR_LINK_STATIC})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(axl install kvtree)
SET(WITH_AXL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(shuffile
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/shuffile
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DSHUFFILE_LINK_STATIC=${SCR_LINK_STATIC})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(shuffile build kvtree)
SET(WITH_SHUFFILE_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(redset
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/redset
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DREDSET_LINK_STATIC=${SCR_LINK_STATIC})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(redset build kvtree)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(redset build rankstr)
SET(WITH_REDSET_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(er
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/er
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} -DER_LINK_STATIC=${SCR_LINK_STATIC})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(er build kvtree)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(er build shuffile)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(er build redset)
SET(WITH_ER_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

# TODO:
# figure out correct way to pass ${CMAKE_CFLAGS} to configure line
# empty CFLAGS causes error
if (BUILD_SHARED_LIBS)
  SET(CONFIGURE_SHARED_FLAG --enable-shared=yes CACHE STRING "")
else()
  SET(CONFIGURE_SHARED_FLAG --enable-shared=no CACHE STRING "")
endif()

EXTERNALPROJECT_ADD(lwgrp
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lwgrp
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
  BUILD_IN_SOURCE 1
  CONFIGURE_COMMAND ./configure --prefix=${CMAKE_INSTALL_PREFIX} ${CONFIGURE_SHARED_FLAG})
SET(WITH_LWGRP_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

IF(NOT BUILD_SHARED_LIBS)
LIST(APPEND DTCMP_BUILD_OPTS "--disable-shared")
ENDIF()
EXTERNALPROJECT_ADD(dtcmp
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/dtcmp
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
  BUILD_IN_SOURCE 1
  CONFIGURE_COMMAND ./configure --prefix=${CMAKE_INSTALL_PREFIX} --with-lwgrp=${WITH_LWGRP_PREFIX} ${CONFIGURE_SHARED_FLAG})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(dtcmp build lwgrp)
SET(WITH_DTCMP_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE PATH "")

EXTERNALPROJECT_ADD(scr
  SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/scr
  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_C_FLAGS_DEBUG=${CMAKE_C_FLAGS_DEBUG} -DCMAKE_CXX_FLAGS_DEBUG=${CMAKE_CXX_FLAGS_DEBUG} ${SCR_CMAKE_OPTS})
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build kvtree)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build rankstr)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build spath)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build er)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build axl)
EXTERNALPROJECT_ADD_STEPDEPENDENCIES(scr build dtcmp)
SET(WITH_SCR_PREFIX ${CMAKE_INSTALL_PREFIX}/scr CACHE PATH "")

# some projects require a "make install" command to work,
# so define at least a basic INSTALL function
INSTALL(FILES NOTICE DESTINATION share/scr)
